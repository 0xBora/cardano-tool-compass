pros:
  - "Full Control & Flexibility: Ability to adapt, integrate, and customize solutions to specific application requirements."
  - "Reduced Vendor Lock-in: Greater independence from single third-party providers, especially when using self-hosted indexers or off-chain libraries."
  - "Optimized Performance: Potential for improved query speeds, reduced latency, and efficient storage (depending on chosen tools and infrastructure)."
  - "Cost Efficiency at Scale: Typically more cost-effective for larger applications or extensive blockchain interactions."

cons:
  - "Technical Complexity: Requires technical expertise and resources for setup, integration, and ongoing maintenance."
  - "Infrastructure and Maintenance Costs: Costs associated with servers, storage, bandwidth, and infrastructure maintenance."
  - "Operational Overhead: Responsibility for continuous monitoring, troubleshooting, upgrades, and infrastructure security."
  - "Data Sync & Consistency Issues: Challenges related to ensuring data accuracy, synchronization, and timely updates."
  - "Slower Initial Setup: Longer deployment times compared to fully managed, pre-configured cloud solutions."

usuallyUsed:
  - " Need high customization or specific performance demands"
  - " Have in-house DevOps capabilities and technical expertise"
  - " Seeking cost efficiency at scale"

toolsAndUseCases:
  - title: "Cardano DB-Sync (Haskell)"
    text: >
      Used for solutions which require Cardano node data completeness, as it synchronizes ALL data from the Cardano blockchain. 
      This comes with trade-offs in both on-disk storage, runtime requirements, and performance. 
      Primary interface is a PostgreSQL database.

  - title: "Kupo (Haskell)"
    text: >
      Fast, lightweight, and configurable Cardano chain indexer. It syncs blockchain data by matching addresses in transaction outputs 
      and builds a lookup table containing output references, values, datums, and scripts. 
      Ideal for solutions which require monitoring/tracking or resolving outputs by address, policy ID, or output reference for dApps, wallets, and explorers.

  - title: "Oura (Rust)"
    text: >
      Doesn't index any data, but supports pluggable sinks where filtered data from the Cardano blockchain can be dumped into 
      (e.g., Elastic Search or Kafka). Also supports a wider variety of events. 
      A good fit for custom and elaborate solutions.

  - title: "Adder (Go)"
    text: >
      Similar to Oura, Adder is an event-emitter coupled with filters. 
      Requires backend storage or an additional solution for handling and serving events from the chain. 
      Supports a variety of filters on addresses or assets in a more direct way. 
      Suitable for custom and elaborate solutions.

  - title: "Yaci Store (Java)"
    text: >
      Versatile and modular solution that functions as a library for custom indexing, an event stream processor, or a full-fledged chain indexer. 
      As a library, it supports real-time event streaming like Oura and Adder. 
      As a full-chain indexer, it provides comprehensive data availability (including Ledger State) with a modular architecture allowing developers to selectively enable components. 
      Main interface is PostgreSQL, also supports MySQL and H2.

  - title: "Scrolls (Rust)"
    text: >
      Provides an in-memory aggregation engine via Redis. Allows applications to watch and react to the evolution of aggregated metrics. 
      Not suited for indexing the entire chain due to memory constraints. 
      Ideal for specific, handpicked metrics. Main interface is Redis.

  - title: "Carp (Rust)"
    text: >
      Modular blockchain indexer built on top of Oura. Synchronizes data into PostgreSQL using task-defined behaviors (standalone Rust plugins). 
      Comes with predefined tasks and supports custom plugins for flexible data handling. 
      Offers an API layer over PostgreSQL for easy access.
